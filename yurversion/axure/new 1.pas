{Если функция на концах отрезка[a,b] имеет значения разных знаков,
то внутри этого отрезка функция проходит через нуль, т. е. содержится корень уравнения.}
program laba;
  const
    e=2.7; 
    h=0.00001; {вводим экспоненту и точность}
  var
    a,b,x: integer;
    f1, f2, t, a1, b1, m, m1,c: real; {вводим переменнные}
  function f(x:real):real;
    begin
      f:=e*e*e-1.5*(x-1)*(x-1); {определяем функцию}
    end;

begin
  writeln ('определите интервал для поиска корней: ');
  write ('a = ');
  readln (a);
  write ('b = ');
  readln (b);     {предоставляем пользователю ввести начальный промежуток нахождения корней}
    for x:=a to b do {для переменной в промежутке}
      begin
          if f(x)*f(x+1)<=0 then
            begin
              writeln ('корень существует на отрезке', '(',x,';',x+1,')');
              writeln ('                 |               ');
              writeln ('                 V               ');  {выводим отрезок, на котором существует корень}
              {Метод половинного деления состоит в том, что мы уменьшаем длину отрезка так, 
              что корень остается внутри отрезка. Это продолжается до тех пор, пока длина отрезка не станет 
              меньше заданной точности.}
              begin
                a1:=x;
                b1:=x+1;
                  repeat
                    m:=f(a1);
                    c:=(a1+b1)/2;
                    m1:=f(c);
                    if m*m1 < 0 then
                      b1:=c
                      else
                      a1:=c
                  until (m1=0) or (abs(a1-b1)<=h);
                 writeln ('                 значение корня = ', c:5:5);
                 writeln;
              end;
            end;
      end;
end.







